
#line 3 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 29
#define YY_END_OF_BUFFER 30
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[210] =
    {   0,
        0,    0,    0,    0,   30,   28,   27,   27,   28,   22,
       28,   25,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   29,   29,   27,    0,   26,    1,   25,
       19,    0,   20,   20,   20,    0,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,    4,   20,    4,   20,   20,   20,   20,   20,
       20,   20,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,    4,   21,   21,   21,    0,    0,    2,
       20,   23,    7,    3,   20,    7,    3,   20,   20,   20,

       20,   20,   20,   10,    9,   10,    9,    5,    5,   20,
       20,   20,   20,   20,   20,   20,   20,   20,    7,    3,
       21,   21,   10,    9,   10,    9,    5,   21,   21,   21,
       21,   20,   20,   20,   20,   20,   20,   20,   13,   13,
        6,    6,   20,   12,   12,   20,   20,   21,   21,   21,
       13,    6,   12,   21,   20,   20,   20,   20,   20,   20,
       20,    8,    8,   21,   21,   24,    8,   14,   20,   20,
       20,   20,   20,   20,   21,   21,   20,   11,   20,   11,
       20,   20,   11,   11,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   17,

       20,   20,   16,   20,   15,   20,   20,   18,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    5,
        5,    6,    1,    5,    1,    1,    7,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    9,    1,    5,
        1,    5,    1,    1,   10,   11,   12,   13,   14,   11,
       11,   15,   16,   11,   11,   17,   18,   19,   20,   11,
       11,   21,   22,   23,   24,   25,   11,   26,   27,   11,
        5,    1,    5,    1,   28,    1,   29,   30,   31,   32,

       33,   34,   35,   36,   37,   38,   35,   39,   40,   41,
       42,   35,   43,   44,   45,   46,   47,   48,   35,   49,
       50,   35,    5,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[51] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    2,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5
    } ;

static const flex_int16_t yy_base[219] =
    {   0,
        0,    0,  428,  426,  413,  926,   49,   51,  407,  926,
      401,  395,   47,   81,   82,   87,   86,   91,  126,   98,
      127,  133,  142,  160,  145,  392,  107,  178,  140,  176,
      149,   98,  183,  353,  196,  202,  353,  926,  926,  344,
      103,    0,  200,  202,  205,    0,  204,  205,  219,  223,
      208,  246,  231,  263,  244,  258,  260,  270,  274,  289,
      291,  312,  297,  305,  309,  325,  337,  319,  353,  354,
      358,  351,  336,  330,  268,  370,  375,  363,  100,  365,
      379,  248,  385,  332,  378,  396,  391,  325,  228,  321,
      288,    0,  401,  407,  275,  400,  404,  409,  414,  428,

      425,  446,  430,  452,  464,  457,  462,  474,  467,  482,
      478,  485,  497,  503,  517,  510,  515,  529,  290,  286,
      538,  543,  281,  250,   93,  181,  222,  189,  309,  466,
      548,  178,  541,  542,  569,  548,  571,  581,  526,  582,
      596,  589,  605,  610,  608,  623,  622,  570,  625,  634,
      191,  187,  167,  413,  641,  635,  656,  649,  650,  664,
      678,  684,  658,  461,  685,  165,  142,    0,  679,  700,
      694,  698,  697,  713,  576,  717,  713,  734,  730,  734,
      738,  737,  138,  220,  749,  753,  757,  775,  772,  774,
      780,  796,  798,  793,  806,  800,  809,  827,  822,    0,

      834,  840,    0,  844,    0,  848,  850,    0,  926,  893,
      898,  901,  906,  910,  912,  916,  110,  920
    } ;

static const flex_int16_t yy_def[219] =
    {   0,
      209,    1,  210,  210,  209,  209,  209,  209,  211,  209,
      209,  209,  209,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  213,  213,  209,  211,  209,  209,  209,
      214,  215,  216,  216,  216,  217,   13,   13,   13,   13,
       13,  216,   13,   13,   13,  216,  216,   13,   13,  216,
       13,  216,  216,   13,   13,  216,   13,   13,  216,   13,
      216,   13,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  213,  213,  213,
      214,  215,  216,  216,  218,   13,   13,   13,   13,  216,

       13,   13,   13,  216,  216,   13,   13,  216,   13,  216,
       13,  216,   13,   13,  216,   13,  216,   13,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  218,   13,   13,  216,   13,   13,   13,  216,   13,
      216,   13,  216,  216,   13,  216,   13,  212,  212,  212,
      212,  212,  212,  212,   13,   13,  216,   13,   13,   13,
      216,  216,   13,  212,  212,  209,  212,  215,   13,  216,
       13,   13,   13,  216,  212,  212,   13,  216,   13,   13,
       13,  216,  212,  212,   13,   13,   13,  216,  216,   13,
       13,  216,  216,   13,   13,  216,  216,  216,   13,  215,

      216,  216,  215,  216,  215,  216,  216,  215,    0,  209,
      209,  209,  209,  209,  209,  209,  209,  209
    } ;

static const flex_int16_t yy_nxt[977] =
    {   0,
        6,    7,    8,    9,   10,    6,   11,   12,    6,   13,
       14,   15,   16,   17,   14,   18,   14,   19,   20,   21,
       14,   22,   23,   14,   24,   14,   14,    6,   25,   26,
       26,   26,   27,   26,   26,   26,   26,   26,   26,   28,
       29,   30,   26,   26,   31,   32,   26,   33,   26,   26,
       36,   36,   36,   36,   41,   42,   43,   43,   43,   43,
       43,   43,   43,   44,   43,   45,   43,   43,   43,   43,
       43,   43,   43,   43,   46,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   48,   47,   49,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   43,   43,   43,

       43,   42,   43,   43,   43,   43,   42,   43,   42,   43,
       41,   52,   86,   95,   43,   42,   43,   60,  124,   47,
       50,   47,   47,   51,   47,   47,   47,   47,   53,   47,
       46,   55,   76,   86,   54,   56,   47,  150,   47,   61,
      124,   57,   43,   43,   43,   62,   42,   63,   42,   43,
       42,   43,   66,   42,   58,   77,   69,   42,   43,   82,
       43,   74,   59,   75,   47,   47,   47,   64,   85,   71,
       65,   47,  166,   47,   67,   42,   43,   70,   43,   68,
       47,   82,   47,   74,   42,   75,   42,   78,   72,   42,
       85,   42,   87,   79,   83,   42,   84,   42,   47,   42,

       47,   89,   90,   36,   36,   46,   80,   91,   42,   91,
       42,   87,   91,   42,   81,  151,   83,   94,   93,   84,
       43,   93,   43,   43,   43,  150,   43,   46,   42,   46,
       42,   94,   46,   89,   90,   43,   94,   43,  151,   43,
       93,   43,   47,   96,   47,   47,   47,   43,   47,   43,
       97,   98,   99,   91,   42,  100,   42,   47,   42,   47,
       43,   47,   43,   47,  150,   91,   42,   91,   42,   47,
      127,   47,  100,   46,  100,  103,   42,  101,  105,   43,
      120,   43,   47,  104,   47,   46,   43,   46,   43,   42,
       43,  102,  105,  127,   42,  104,   91,   42,   42,  120,

      105,   47,   46,   47,   91,   42,  104,   43,   47,   43,
       47,  108,   47,  108,  107,   46,   46,   42,  106,   91,
       42,  110,  152,   43,   46,   43,   89,   43,  110,   47,
       89,   47,   91,   42,  108,   43,  109,   43,   42,   46,
       42,  152,  112,  111,   42,   47,  119,   47,  114,   47,
      110,   40,   46,   43,  112,   43,   38,   47,   89,   47,
       91,   42,  115,  115,  112,   91,   42,  117,  119,   43,
       43,   42,   43,   42,  117,   47,  113,   47,   42,  121,
       46,  115,  116,   42,  121,   46,   42,   42,  123,  118,
      123,   47,   47,   42,   47,  129,  117,  124,  121,   42,

       42,  128,   40,  122,   42,  130,   39,  131,   91,   42,
       38,  123,  209,  125,   91,   42,   43,  129,   43,  126,
       43,   42,   43,  128,  130,   43,  167,   43,   46,  131,
       43,   35,   43,   35,   46,   91,   42,  209,   47,  135,
       47,   43,   47,   43,   47,  167,   43,   47,   43,   47,
      209,  134,   47,  133,   47,   46,  209,  135,  135,   91,
       42,  136,   43,   47,   43,   47,  138,  209,   47,   42,
       47,   91,   42,   43,   42,   43,  137,  175,   43,   46,
       43,   91,   42,   43,   47,   43,   47,  209,  153,   91,
       42,   46,   91,   42,   43,   47,   43,   47,  141,  175,

       47,   46,   47,  209,  139,   47,  209,   47,  139,   46,
      141,  153,   46,   43,  143,   43,   47,  141,   47,   43,
      209,   43,   91,   42,   91,   42,   43,  140,   43,  142,
      209,  139,  144,   91,   42,   47,  209,   47,  146,  144,
      209,   47,   46,   47,   46,   43,   42,   43,   47,  148,
       47,   42,  146,   46,  148,  145,   42,   43,   43,   43,
       43,  146,  144,  209,   43,  209,   43,   47,  148,   47,
      209,  154,  209,  149,  209,  147,   91,   42,   42,   47,
       47,   47,   47,  156,   42,  155,   47,   43,   47,   43,
      209,  157,  164,  157,  154,  158,   46,   43,   43,   43,

       43,  209,  183,   91,   42,   43,  209,   43,  209,   47,
      209,   47,   91,   42,  157,  164,  159,   91,   42,   47,
       47,   47,   47,   46,   43,  183,   43,   47,  160,   47,
       91,   42,   46,   42,  209,  162,  162,   46,   43,  209,
       43,  166,   42,  161,  209,  209,   47,  164,   47,  168,
       46,   43,  209,   43,  163,  162,  209,   43,  209,   43,
       47,  209,   47,   91,   42,   43,  170,   43,   43,  209,
      165,  169,  170,   47,   43,   47,   43,  171,  150,   47,
       43,   47,   43,   46,  209,   91,   42,   47,  172,   47,
       47,   91,   42,   42,  170,   43,   47,   43,   47,  209,

      173,  175,   47,  209,   47,   46,  174,   91,   42,  209,
       43,   46,   43,   43,   43,   43,   43,   47,  209,  177,
       91,   42,  209,  176,  178,   42,  178,   46,  181,   43,
      209,   43,  179,  209,   47,   47,   47,   47,   47,  209,
       46,   91,   42,  183,   91,   42,   43,  180,   43,  178,
       43,   47,   43,   47,   43,  209,   43,  182,  185,  209,
      189,   46,  186,  209,   46,   43,  184,   43,   47,   43,
       47,   43,   47,   43,   47,   43,   47,  209,   47,   91,
       42,  188,   91,   42,  187,  191,  209,   47,  209,   47,
       43,   47,   43,  190,  192,   47,   43,   47,   43,   46,

      209,  209,   46,   91,   42,   91,   42,   91,  200,   43,
      193,   43,   47,  209,   47,  198,   91,   42,  195,  194,
       47,  209,   43,   46,   43,   46,  197,   46,  209,  196,
      203,   47,  209,   47,   91,   42,   46,  209,   43,  209,
       43,   91,   42,  209,   47,  209,   47,   91,  205,  209,
      199,   91,   42,  201,   46,   91,   42,   91,  208,  209,
       47,   46,   47,  209,  209,  209,  209,   46,  202,  209,
      209,   46,  209,  209,  209,   46,  206,   46,  204,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  207,   34,   34,   34,   34,   34,   37,   37,

       37,   37,   37,   73,   73,   73,   88,   88,   88,   88,
       88,   91,  209,   91,   91,   92,   92,   43,   43,   43,
       43,  132,  209,  132,  132,    5,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209
    } ;

static const flex_int16_t yy_chk[977] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        7,    7,    8,    8,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   14,

       15,  125,   17,   16,   17,   16,   32,   18,   79,   18,
       41,   17,   32,  217,   20,   27,   20,   20,   79,   14,
       15,   14,   15,   16,   17,   16,   17,   16,   17,   18,
       41,   18,   27,   32,   17,   19,   20,  125,   20,   20,
       79,   19,   19,   21,   19,   21,  183,   21,   29,   22,
      167,   22,   22,   25,   19,   27,   23,   31,   23,   29,
       23,   25,   19,   25,   19,   21,   19,   21,   31,   24,
       21,   22,  166,   22,   22,  153,   24,   23,   24,   22,
       23,   29,   23,   25,   30,   25,   28,   28,   24,  126,
       31,   33,   33,   28,   30,  152,   30,  128,   24,  151,

       24,   35,   35,   36,   36,  132,   28,   43,   43,   44,
       44,   33,   45,   45,   28,  128,   30,   45,   44,   30,
       47,   48,   47,   48,   51,  126,   51,   43,  184,   44,
      127,   49,   45,   89,   89,   49,   45,   49,  128,   50,
       44,   50,   47,   48,   47,   48,   51,   53,   51,   53,
       49,   50,   51,   52,   52,   52,   82,   49,  124,   49,
       55,   50,   55,   50,  184,   56,   56,   57,   57,   53,
       82,   53,   54,   52,   52,   55,   75,   53,   57,   54,
       75,   54,   55,   56,   55,   56,   58,   57,   58,  123,
       59,   54,   59,   82,  120,   58,   60,   60,  119,   75,

       57,   54,   95,   54,   63,   63,   56,   61,   58,   61,
       58,   60,   59,   61,   59,   91,   60,  129,   58,   62,
       62,   64,  129,   64,   63,   65,   90,   65,   62,   61,
       88,   61,   66,   66,   60,   68,   61,   68,   74,   62,
       84,  129,   66,   64,   73,   64,   74,   65,   68,   65,
       62,   40,   66,   67,   67,   67,   37,   68,   34,   68,
       69,   69,   69,   70,   66,   71,   71,   72,   74,   72,
       70,   78,   70,   80,   71,   67,   67,   67,   76,   76,
       69,   69,   70,   77,   77,   71,   85,   81,   78,   72,
       80,   72,   70,   83,   70,   85,   71,   81,   76,   87,

       26,   83,   12,   77,   86,   86,   11,   87,   93,   93,
        9,   78,    5,   80,   94,   94,   96,   85,   96,   81,
       97,  154,   97,   83,   86,   98,  154,   98,   93,   87,
       99,    4,   99,    3,   94,  100,  100,    0,   96,  100,
       96,  101,   97,  101,   97,  154,  103,   98,  103,   98,
        0,   99,   99,   98,   99,  100,    0,  102,  100,  104,
      104,  101,  102,  101,  102,  101,  103,    0,  103,  164,
      103,  105,  105,  106,  130,  106,  102,  164,  107,  104,
      107,  108,  108,  109,  102,  109,  102,    0,  130,  110,
      110,  105,  112,  112,  111,  106,  111,  106,  112,  164,

      107,  108,  107,    0,  111,  109,    0,  109,  110,  110,
      113,  130,  112,  113,  114,  113,  111,  112,  111,  114,
        0,  114,  117,  117,  115,  115,  116,  111,  116,  113,
        0,  110,  116,  139,  139,  113,    0,  113,  117,  115,
        0,  114,  117,  114,  115,  118,  121,  118,  116,  121,
      116,  122,  118,  139,  122,  116,  131,  133,  134,  133,
      134,  117,  115,    0,  136,    0,  136,  118,  121,  118,
        0,  131,    0,  122,    0,  118,  135,  135,  148,  133,
      134,  133,  134,  134,  175,  133,  136,  137,  136,  137,
        0,  135,  148,  137,  131,  136,  135,  138,  140,  138,

      140,    0,  175,  141,  141,  142,    0,  142,    0,  137,
        0,  137,  143,  143,  135,  148,  137,  144,  144,  138,
      140,  138,  140,  141,  145,  175,  145,  142,  138,  142,
      146,  146,  143,  149,    0,  147,  146,  144,  147,    0,
      147,  150,  150,  143,    0,    0,  145,  149,  145,  155,
      146,  156,    0,  156,  147,  146,    0,  155,    0,  155,
      147,    0,  147,  157,  157,  158,  159,  158,  159,    0,
      149,  156,  157,  156,  163,  156,  163,  158,  150,  155,
      160,  155,  160,  157,    0,  161,  161,  158,  159,  158,
      159,  162,  162,  165,  157,  169,  163,  169,  163,    0,

      160,  165,  160,    0,  160,  161,  161,  170,  170,    0,
      171,  162,  171,  173,  172,  173,  172,  169,    0,  169,
      174,  174,    0,  165,  172,  176,  170,  170,  173,  177,
        0,  177,  171,    0,  171,  173,  172,  173,  172,    0,
      174,  178,  178,  176,  182,  182,  179,  172,  179,  170,
      180,  177,  180,  177,  181,    0,  181,  174,  177,    0,
      185,  178,  179,    0,  182,  185,  176,  185,  179,  186,
      179,  186,  180,  187,  180,  187,  181,    0,  181,  189,
      189,  182,  188,  188,  181,  187,    0,  185,    0,  185,
      190,  186,  190,  186,  188,  187,  191,  187,  191,  189,

        0,    0,  188,  192,  192,  193,  193,  196,  196,  194,
      189,  194,  190,    0,  190,  194,  197,  197,  191,  190,
      191,    0,  195,  192,  195,  193,  193,  196,    0,  192,
      199,  194,    0,  194,  198,  198,  197,    0,  199,    0,
      199,  201,  201,    0,  195,    0,  195,  202,  202,    0,
      195,  204,  204,  197,  198,  206,  206,  207,  207,    0,
      199,  201,  199,    0,    0,    0,    0,  202,  198,    0,
        0,  204,    0,    0,    0,  206,  204,  207,  201,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  206,  210,  210,  210,  210,  210,  211,  211,

      211,  211,  211,  212,  212,  212,  213,  213,  213,  213,
      213,  214,    0,  214,  214,  215,  215,  216,  216,  216,
      216,  218,    0,  218,  218,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lexer.l"
#line 2 "lexer.l"
#include <iostream>
#include <string>
using std::cout;
using std::string;


int reserved = 0, operators = 0, classes = 0, literals = 0, properties = 0, symbols = 0, individuals = 0, typeOfData = 0, cardinals = 0, comments = 0;

// Contadores específicos para palavras reservadas
int andCount = 0, orCount = 0, notCount = 0, someCount = 0, allCount = 0, valueCount = 0, minCount = 0, maxCount = 0, exactlyCount = 0, thatCount = 0, onlyCount = 0, classCount = 0, equivalentToCount = 0, individualsCount = 0, subClassOfCount = 0, disjointClasses = 0;
#line 691 "lex.yy.cc"

#line 693 "lex.yy.cc"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 18 "lexer.l"


#line 829 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 210 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 926 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 20 "lexer.l"
{ BEGIN(COMMENT); /* Entrar no estado de comentário */ }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 21 "lexer.l"
{ BEGIN(INITIAL); comments++; /* Sair do estado de comentário */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 23 "lexer.l"
{ operators++; andCount++; cout << "AND token\n"; } 
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 24 "lexer.l"
{ operators++; orCount++; cout << "OR token\n"; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 25 "lexer.l"
{ operators++; notCount++; cout << "NOT token\n"; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 26 "lexer.l"
{ reserved++; someCount++; cout << "SOME token\n"; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 27 "lexer.l"
{ reserved++; allCount++; cout << "ALL token\n"; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 28 "lexer.l"
{ reserved++; valueCount++; cout << "VALUE token\n"; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 29 "lexer.l"
{ reserved++; minCount++; cout << "MIN token\n"; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 30 "lexer.l"
{ reserved++; maxCount++; cout << "MAX token\n"; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 31 "lexer.l"
{ reserved++; exactlyCount++; cout << "EXACTLY token\n"; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 32 "lexer.l"
{ reserved++; thatCount++; cout << "THAT token\n"; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 33 "lexer.l"
{ reserved++; onlyCount++; cout << "ONLY token\n"; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 34 "lexer.l"
{ reserved++; classCount++; cout << "Class token\n"; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 35 "lexer.l"
{ reserved++; equivalentToCount++; cout << "EquivalentTo token\n"; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 36 "lexer.l"
{ reserved++; individualsCount++; cout << "Individuals token\n"; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 37 "lexer.l"
{ reserved++; subClassOfCount++; cout << "SubClassOf token\n"; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 38 "lexer.l"
{ reserved++; disjointClasses++; cout << "DisjointClasses token\n"; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 40 "lexer.l"
{ individuals++; cout << yytext << ": Individual token\n"; } // Identificadores de indivíduos
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 42 "lexer.l"
{ classes++; cout << yytext << ": Class token\n"; } // Identificadores de classes
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 44 "lexer.l"
{ properties++; cout << yytext << ": Property token\n"; } // Identificadores de propriedades
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 46 "lexer.l"
{ symbols++; cout << yytext << ": Special Symbol token\n"; } // Identificadores de símbolos especiais
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 48 "lexer.l"
{ typeOfData++; cout << yytext << ": Type of data\n"; } // Identificadores de tipos de dados [ALTERAR] dizer que são namespaces (owl, rdf, xsa e rdfs) e o da frente como "string" é o tipo, ou deixar tudo como dataType
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 50 "lexer.l"
{ cardinals++; cout << yytext << ": Cardinal token\n"; } // Identificadores de números cardinais
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 52 "lexer.l"
{ literals++; cout << yytext << ": Number literal token\n"; }
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 53 "lexer.l"
{ literals++; cout << yytext << ": String literal token\n"; }
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 55 "lexer.l"
{ /* Ignorar espaços, tabs e novas linhas */ }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 56 "lexer.l"
{ cout << "Unknown token: " << yytext << "\n"; } // Ignora outros caracteres
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 58 "lexer.l"
ECHO;
	YY_BREAK
#line 1034 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 210 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 210 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 209);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 58 "lexer.l"


int main() {
    yyFlexLexer lexer;
	lexer.yylex();
    cout << "Reserved: " << reserved << "\n";
    cout << "Operators: " << operators << "\n";
    cout << "Classes: " << classes << "\n";
    cout << "Literals: " << literals << "\n";
    cout << "Properties: " << properties << "\n";
    cout << "Special Symbols: " << symbols << "\n";
    cout << "Individuals: " << individuals << "\n";
    cout << "Type of Data: " << typeOfData << "\n";
    cout << "Cardinals: " << cardinals << "\n";
    cout << "Comments: " << comments << "\n";
}

