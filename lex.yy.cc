
#line 3 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 61
#define YY_END_OF_BUFFER 62
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[435] =
    {   0,
        0,    0,   62,   60,   59,   59,   55,   58,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   59,   58,   57,   52,   53,   53,   53,    0,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,    2,   53,   53,   53,   53,   53,   53,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,    2,   54,    2,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,    5,    1,   53,   53,   53,   53,   53,   53,
       53,    8,    7,   53,   53,    3,   53,   53,   53,   53,
       53,   53,   53,   53,    5,    1,   54,    5,    1,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       33,   54,   54,    8,    7,    8,    7,    3,   54,   54,
       54,    3,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   37,   11,   53,    4,
       53,   10,   53,   53,   56,   54,   54,   54,   54,   26,

       54,   54,   54,   54,   54,   54,   54,   54,   54,   36,
       54,   54,   54,   54,   11,   11,   54,   54,   18,    4,
       54,    4,   54,   10,   10,   54,   54,   54,   54,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,    6,
       53,   54,    0,   54,   54,   54,   54,   54,   31,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   45,
       54,   47,   54,    6,   12,   53,   53,   53,   53,   53,
       38,   53,   53,   53,   53,   23,    0,   54,   54,   54,
       30,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   46,   54,   53,    9,   53,   53,   22,   40,

       53,   53,   53,    0,   25,   54,   29,    9,   54,   34,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   53,
       53,   53,   53,   53,   53,    0,   27,   54,   54,   35,
       54,   54,   54,   54,   54,   17,   54,   53,   53,   53,
       53,   53,   53,    0,   54,   32,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   53,   53,   53,   53,
       53,   21,    0,   54,   19,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   53,   53,   53,   53,   15,    0,
       54,   54,   54,   54,   54,   54,   54,   49,   54,   54,
       53,   53,   14,   20,   24,   54,   54,   54,   54,   54,

       54,   48,   50,   54,   53,   13,   28,   54,   54,   54,
       54,   54,   51,   53,   54,   54,   54,   54,   54,   53,
       39,   54,   54,   54,   44,   16,   54,   54,   43,   54,
       54,   41,   42,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    4,
        4,    1,    1,    4,    1,    1,    1,    5,    5,    5,
        5,    6,    5,    7,    5,    5,    5,    8,    1,    4,
        4,    4,    1,    1,    9,   10,   11,   12,   13,   14,
       14,   15,   16,   14,   17,   18,   19,   20,   21,   22,
       14,   23,   24,   25,   26,   27,   14,   28,   29,   14,
        4,    1,    4,    1,   30,    1,   31,   32,   33,   34,

       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,    4,    1,    4,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[57] =
    {   0,
        1,    1,    1,    1,    2,    2,    2,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5
    } ;

static const flex_int16_t yy_base[440] =
    {   0,
        0,    0, 1250, 1328,   55,   57, 1328,   56,   59,   62,
       65,   69,   76,   80,  106,  109,  144,  114,  122,  126,
      154,  173,  180,  202,  152,  241,  242,  246,  247,  260,
      250,  278,  290,  293,  307,  297,  325,  326,  339,  261,
      343,   88,   91, 1328,  136,  161,  373,  383,    0,  391,
      394,  399,  404,  420,  426,  430,  433,  439,  442,  468,
      459,  473,  476,  480,  489,  494,  507,  515,  522,    0,
       60,   88,  549,   75,  263, 1199, 1202, 1195, 1194, 1209,
     1190,  126,  145, 1195, 1184, 1181, 1168, 1167,  178,  161,
      265,  287,   55, 1170,  368,  294,    0,  298,    0, 1155,

     1152, 1164,  305, 1148,  307, 1144,  164,  344, 1145, 1134,
      340,  344,  549,  601, 1152,  604,  607,  610,  618,  621,
      639,  649,  656,  659,  666,  670,  675,  678,  686,  696,
      706,  713,  716,  722,    0,    0,  760,    0,    0, 1151,
     1137, 1123, 1118, 1117, 1107, 1112,  361,  381, 1112, 1131,
     1103, 1098, 1097,    0,    0,    0,    0,    0, 1101,  168,
     1081,    0,  373,  413, 1083, 1081, 1076,  406, 1066,  457,
     1066,   59,  251, 1068, 1055,  479,  483, 1062,  812,  815,
      818,  821,  824,  827,  834,  864,  860,  873,  877,  880,
      886,  890,  895,  899, 1328, 1083, 1066,  193,  118, 1079,

      463,  454,  365,  492,  689,  496, 1046,  415,  499, 1076,
      628, 1047, 1032,  517,    0, 1060,  644,  412, 1048,    0,
      680, 1043,  614,    0, 1037,  624,  453,  518,  724,  906,
      912,  917,  926,  934,  938,  947,  965,  956,  960,  974,
      978, 1028, 1030, 1004,  993, 1000,  992,  600,    0,  959,
      964,  926,  944,  921,  921,  906,  908,  910,  904,    0,
      909,    0,  893,    0, 1328,  982,  987,  991,  995, 1004,
     1000, 1017, 1013, 1008, 1034,    0,  924,  883,  883,  873,
        0,  604,  878,  851,  850,  852,  836,  843,  833,  824,
      810,  828,    0,  823, 1043, 1048, 1053, 1056, 1060, 1065,

     1069, 1074, 1091,  817,    0,  820,    0,    0,  805,    0,
      813,  815,  814,  797,  796,  788,  803,  795,  802, 1095,
     1103, 1106, 1110, 1121, 1124,  791,  766,  711,  721,    0,
      748,  723,  722,  725,  742,    0,  525, 1143, 1151, 1154,
     1157, 1161, 1164,  726,  706,    0,  718,  710,  701,  699,
      716,  705,  693,  703,  700,  706, 1169, 1173, 1183, 1203,
     1209, 1213,  693,  704,    0,  684,  689,  680,  682,  654,
      649,  648,  651,  625, 1216, 1219, 1222, 1230, 1328,  612,
      607,  614,  625,  623,  588,  600,  595,    0,  592,  572,
     1248, 1251, 1328, 1256, 1328,  573,  514,  503,  500,  491,

      499,    0,    0,  401, 1261, 1328,    0,  331,  315,  283,
      243,  237,    0, 1264,  223,  234,  228,  165,  160, 1268,
        0,  165,  161,  156,    0, 1328,  111,  103,    0,   46,
       40,    0,    0, 1328, 1312, 1316,   70, 1319, 1322
    } ;

static const flex_int16_t yy_def[440] =
    {   0,
      434,    1,  434,  434,  434,  434,  434,  435,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  434,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  434,  435,  434,  434,  436,  436,  436,  437,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  438,
      438,  438,  434,   73,   73,   73,   73,   73,   73,   73,
       73,  438,   73,   73,   73,   73,   73,   73,  438,  438,
       73,   73,  438,   73,   73,  438,  438,   73,   73,   73,

       73,   73,  438,   73,   73,   73,  438,   73,   73,   73,
      438,   73,  436,  436,  439,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  438,  438,  434,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  438,  137,  137,  137,
      137,  137,  137,  438,  438,  137,  137,  438,  137,  137,
      137,  137,  438,  137,  137,  137,  137,  438,  137,  137,
      137,  438,  137,  137,  137,  438,  137,  439,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  434,  438,  438,  438,  438,  438,

      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  438,  434,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  434,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  438,  434,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  436,  436,  436,  436,  436,  436,

      436,  436,  436,  434,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  436,
      436,  436,  436,  436,  436,  434,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  436,  436,  436,
      436,  436,  436,  434,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  436,  436,  436,  436,
      436,  436,  434,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  436,  436,  436,  436,  434,  434,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      436,  436,  434,  436,  434,  438,  438,  438,  438,  438,

      438,  438,  438,  438,  436,  434,  438,  438,  438,  438,
      438,  438,  438,  436,  438,  438,  438,  438,  438,  436,
      438,  438,  438,  438,  438,  434,  438,  438,  438,  438,
      438,  438,  438,    0,  434,  434,  434,  434,  434
    } ;

static const flex_int16_t yy_nxt[1385] =
    {   0,
        4,    5,    6,    7,    8,    8,    8,    4,    9,   10,
       11,   12,   13,   10,   10,   14,   10,   15,   16,   17,
       18,   19,   10,   20,   21,   10,   22,   23,   10,    4,
       24,   25,   26,   27,   28,   29,   26,   30,   31,   26,
       26,   32,   33,   34,   35,   36,   26,   37,   38,   39,
       40,   41,   26,   26,   26,   26,   42,   42,   42,   42,
       43,   43,   43,   45,   45,   45,   45,   45,   45,   45,
       45,   45,  115,   45,   45,   45,   47,  135,   48,  158,
       45,   45,   45,  224,   45,   45,   45,  433,   49,   42,
       42,   49,  135,  432,   49,   43,   43,   43,   49,  136,

       47,  135,   48,   52,  158,   49,   50,   51,  224,   49,
       45,   45,   45,   45,   45,   45,  138,   56,   45,   45,
       45,  136,   53,   54,   57,  195,   45,   45,   45,   52,
       45,   45,   45,   62,  147,   49,   63,  431,   49,   56,
       45,   45,   45,   49,   55,  430,   65,   57,   45,   45,
       45,   49,  244,  147,   58,   49,  147,   62,   45,   45,
       45,   63,   59,   64,   60,   45,   45,   45,   67,   70,
       65,   70,  172,   49,   61,  148,   66,   45,   45,   45,
      155,   68,   76,   49,   45,   45,   45,  212,   60,  213,
       49,   67,  429,   73,  172,   73,   77,  428,   69,  243,

      195,  427,   49,   68,  155,  154,   78,  425,  424,   49,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   71,
       70,   72,   70,   70,   70,   70,   70,   70,   70,   70,
       70,  154,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   74,   73,   75,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   70,   70,
       70,   70,  423,   70,   70,   70,   70,   70,  422,   70,
      421,  419,   79,   82,  136,  224,   80,   70,   70,   70,
       70,  418,   73,   73,   73,   73,   81,   73,   84,   73,
       73,   73,  154,   86,   85,   70,  139,   70,   89,   83,

      225,   73,   73,   73,  110,   90,  155,   70,   87,   70,
       70,  163,   70,   93,   70,  163,   70,  140,  156,   73,
       91,   73,   88,  168,   70,  168,   96,   94,   92,   97,
      157,   73,  417,   73,   73,  163,   73,   95,   73,  164,
       73,  100,   70,   70,   70,   70,  103,  168,   73,  170,
       98,  111,  172,  107,   99,  101,   70,  176,   70,  102,
       70,  176,   70,  104,  416,  415,   73,   73,   73,   73,
      105,  204,  195,  112,  173,  106,  108,   45,   45,   45,
       73,  176,   73,  109,   73,  177,   73,   45,   45,   45,
      113,  204,  158,  204,  114,   45,   45,   45,   45,   45,

       45,  215,   49,   45,   45,   45,  247,  118,   45,   45,
       45,  160,   49,  205,  113,  161,  114,  162,  220,  195,
       49,  116,  195,   49,   45,   45,   45,  215,   49,  118,
       45,   45,   45,   49,   45,   45,   45,   45,   45,   45,
      220,  215,  117,   45,   45,   45,   45,   45,   45,   49,
      413,  251,  123,  120,  119,   49,  259,  122,  124,   49,
      195,  195,   49,   45,   45,   45,  125,  216,   49,  220,
      195,   49,   45,   45,   45,  121,  123,   45,   45,   45,
       45,   45,   45,  122,   45,   45,   45,  245,   49,  263,
      128,  222,  126,   45,   45,   45,  246,   49,   45,   45,

       45,  127,   49,  195,  228,   49,  195,  130,  228,   49,
      129,   45,   45,   45,  128,  132,  248,  126,   49,   45,
       45,   45,  252,   49,  195,  131,   45,   45,   45,  228,
      264,  130,  133,  229,  353,  412,   49,  132,  411,  134,
      354,  248,  355,  410,   49,  249,  409,  257,  356,  253,
      408,   49,  264,   45,   45,   45,  133,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   49,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,

      137,  137,  137,  137,  137,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,  282,  407,  404,
      181,  195,   45,   45,   45,   45,   45,   45,  403,  402,
       49,  195,  308,   49,  401,  195,   49,  400,  399,   49,
      398,  282,  181,   45,   45,   45,  180,   49,  397,  396,
       49,  195,  179,   45,   45,   45,  182,  261,  308,  183,
       45,   45,   45,   45,   45,   45,  395,  262,   49,  390,
       45,   45,   45,  184,   45,   45,   45,  254,   49,   45,
       45,   45,   45,   45,   45,   49,  186,  195,   49,  185,
       45,   45,   45,  258,  389,   49,  195,  388,  387,   49,

       45,   45,   45,  386,   49,  385,  188,   49,  190,  187,
       45,   45,   45,  248,  384,   49,  191,   45,   45,   45,
       45,   45,   45,  383,  189,   49,   45,   45,   45,  260,
      190,  195,  188,  382,  381,   49,  264,  192,  248,  194,
      380,  193,   49,  374,  373,   49,  372,  371,  370,  369,
      368,   49,  367,  366,  365,  364,  363,  352,  264,  351,
      350,  349,  192,  348,  347,  346,  193,  195,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,  345,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,

      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,  344,  337,  336,  335,   45,   45,
       45,   49,  232,  334,   49,  333,  332,   49,  331,  330,
       49,  329,  328,   49,  327,  326,   49,  319,  318,  231,
      230,  317,  316,   49,   45,   45,   45,  232,   45,   45,
       45,  315,  233,  314,  235,  234,  236,   45,   45,   45,
      237,   45,   45,   45,   45,   45,   45,  313,  312,   49,
       45,   45,   45,   49,   45,   45,   45,  311,  310,   45,

       45,   45,   49,   45,   45,   45,   49,  240,  309,   49,
       45,   45,   45,  265,  307,   49,   45,   45,   45,   49,
      238,   45,   45,   45,   49,  306,  305,  239,   49,  240,
       45,   45,   45,  304,  267,   49,  294,  241,   45,   45,
       45,   49,   45,   45,   45,  293,   49,  292,  291,  290,
      266,   45,   45,   45,  289,   49,  268,  288,  267,  287,
       45,   45,   45,   49,   45,   45,   45,   49,  270,   45,
       45,   45,  269,  273,  286,  285,   49,  272,   45,   45,
       45,  271,   45,   45,   45,   49,   45,   45,   45,   49,
      274,   45,   45,   45,   49,   45,   45,   45,  284,   45,

       45,   45,  283,   49,   45,   45,   45,   49,   45,   45,
       45,   49,   45,   45,   45,  296,   49,   45,   45,   45,
       49,   45,   45,   45,   49,  295,  281,  275,  298,   49,
      280,  279,  297,   49,  278,  277,  300,   49,   45,   45,
       45,  296,   49,  276,  195,  299,   49,   45,   45,   45,
      195,  301,   45,   45,   45,  195,  302,   45,   45,   45,
       45,   45,   45,   49,   45,   45,   45,  195,  303,   45,
       45,   45,   49,   45,   45,   45,  256,   49,   45,   45,
       45,  255,   49,  195,  250,   49,  195,  321,  242,   49,
      195,   49,  320,  227,   49,   45,   45,   45,   49,   45,

       45,   45,  226,   49,  223,  338,  322,   45,   45,   45,
       45,   45,   45,  221,   45,   45,   45,  219,  323,  218,
       49,  217,  324,  214,   49,   45,   45,   45,   45,   45,
       45,  211,   49,  210,  209,   49,  340,  208,  325,   49,
      207,  342,  206,  203,  341,  202,  339,   45,   45,   45,
       49,  201,  200,   49,  343,   45,   45,   45,   45,   45,
       45,   45,   45,   45,  199,   45,   45,   45,   45,   45,
       45,  198,   49,   45,   45,   45,  197,   45,   45,   45,
       49,   49,  175,   49,  357,  174,   49,   45,   45,   45,
       49,  171,  169,   49,  167,  359,  361,  376,   49,  375,

      358,  166,   49,  165,  360,  362,  159,   45,   45,   45,
      153,  152,   49,   45,   45,   45,  379,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,  393,
      151,  377,   49,  378,   45,   45,   45,  150,   49,  149,
      146,  145,   49,  144,  143,   49,  142,  141,   49,  434,
      434,   49,   45,   45,   45,   45,   45,   45,  406,   49,
       45,   45,   45,  392,  391,   45,   45,   45,   45,   45,
       45,  394,   45,   45,   45,  426,  434,   49,  434,  434,
       49,  434,  434,  434,  434,   49,  434,  434,  434,  434,
       49,  434,  434,   49,  434,  414,  405,   49,  434,  434,

      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  420,   44,   44,  434,   44,   46,   46,   46,
       46,   70,  434,   70,  178,  178,  178,    3,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434
    } ;

static const flex_int16_t yy_chk[1385] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,    6,    6,
        8,    8,    8,    9,    9,    9,   10,   10,   10,   11,
       11,   11,  437,   12,   12,   12,    9,   71,    9,   93,
       13,   13,   13,  172,   14,   14,   14,  431,    9,   42,
       42,   10,   74,  430,   11,   43,   43,   43,   12,   72,

        9,   71,    9,   13,   93,   13,   11,   12,  172,   14,
       15,   15,   15,   16,   16,   16,   74,   16,   18,   18,
       18,   72,   13,   14,   16,  199,   19,   19,   19,   13,
       20,   20,   20,   18,   82,   15,   18,  428,   16,   16,
       45,   45,   45,   18,   15,  427,   20,   16,   17,   17,
       17,   19,  199,   83,   17,   20,   82,   18,   21,   21,
       21,   18,   17,   19,   17,   46,   46,   46,   21,   25,
       20,   25,  107,   17,   17,   83,   20,   22,   22,   22,
       90,   22,   25,   21,   23,   23,   23,  160,   17,  160,
       46,   21,  424,   25,  107,   25,   25,  423,   23,  198,

      198,  422,   22,   22,   90,   89,   25,  419,  418,   23,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   89,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   26,   27,
       26,   27,  417,   28,   29,   28,   29,   31,  416,   31,
      415,  412,   27,   28,   75,  173,   27,   30,   40,   30,
       40,  411,   26,   27,   26,   27,   27,   28,   29,   28,
       29,   31,   91,   31,   30,   32,   75,   32,   33,   28,

      173,   30,   40,   30,   40,   33,   92,   33,   32,   33,
       34,   96,   34,   34,   36,   98,   36,   75,   91,   32,
       33,   32,   32,  103,   35,  105,   35,   34,   33,   35,
       92,   33,  410,   33,   34,   96,   34,   34,   36,   98,
       36,   36,   37,   38,   37,   38,   38,  103,   35,  105,
       35,   41,  108,   39,   35,   37,   39,  111,   39,   37,
       41,  112,   41,   38,  409,  408,   37,   38,   37,   38,
       38,  147,  203,   41,  108,   38,   39,   47,   47,   47,
       39,  111,   39,   39,   41,  112,   41,   48,   48,   48,
       47,  148,   95,  147,   48,   50,   50,   50,   51,   51,

       51,  163,   47,   52,   52,   52,  203,   52,   53,   53,
       53,   95,   48,  148,   47,   95,   48,   95,  168,  218,
       50,   50,  208,   51,   54,   54,   54,  163,   52,   52,
       55,   55,   55,   53,   56,   56,   56,   57,   57,   57,
      168,  164,   51,   58,   58,   58,   59,   59,   59,   54,
      404,  208,   57,   54,   53,   55,  218,   56,   58,   56,
      227,  202,   57,   61,   61,   61,   59,  164,   58,  170,
      201,   59,   60,   60,   60,   55,   57,   62,   62,   62,
       63,   63,   63,   56,   64,   64,   64,  201,   61,  227,
       62,  170,   60,   65,   65,   65,  202,   60,   66,   66,

       66,   61,   62,  206,  176,   63,  209,   65,  177,   64,
       64,   67,   67,   67,   62,   67,  204,   60,   65,   68,
       68,   68,  209,   66,  214,   66,   69,   69,   69,  176,
      228,   65,   68,  177,  337,  401,   67,   67,  400,   69,
      337,  204,  337,  399,   68,  206,  398,  214,  337,  209,
      397,   69,  228,  113,  113,  113,   68,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,  113,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,  114,  114,  114,  116,  116,
      116,  117,  117,  117,  118,  118,  118,  248,  396,  390,
      118,  223,  119,  119,  119,  120,  120,  120,  389,  387,
      114,  226,  282,  116,  386,  211,  117,  385,  384,  118,
      383,  248,  118,  121,  121,  121,  117,  119,  382,  381,
      120,  217,  116,  122,  122,  122,  119,  223,  282,  120,
      123,  123,  123,  124,  124,  124,  380,  226,  121,  374,
      125,  125,  125,  121,  126,  126,  126,  211,  122,  127,
      127,  127,  128,  128,  128,  123,  125,  221,  124,  124,
      129,  129,  129,  217,  373,  125,  205,  372,  371,  126,

      130,  130,  130,  370,  127,  369,  128,  128,  130,  127,
      131,  131,  131,  205,  368,  129,  131,  132,  132,  132,
      133,  133,  133,  367,  129,  130,  134,  134,  134,  221,
      130,  229,  128,  366,  364,  131,  229,  132,  205,  134,
      363,  133,  132,  356,  355,  133,  354,  353,  352,  351,
      350,  134,  349,  348,  347,  345,  344,  335,  229,  334,
      333,  332,  132,  331,  329,  328,  133,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  327,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,

      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  179,  179,  179,  180,
      180,  180,  181,  181,  181,  182,  182,  182,  183,  183,
      183,  184,  184,  184,  326,  319,  318,  317,  185,  185,
      185,  179,  181,  316,  180,  315,  314,  181,  313,  312,
      182,  311,  309,  183,  306,  304,  184,  294,  292,  180,
      179,  291,  290,  185,  187,  187,  187,  181,  186,  186,
      186,  289,  182,  288,  184,  183,  185,  188,  188,  188,
      186,  189,  189,  189,  190,  190,  190,  287,  286,  187,
      191,  191,  191,  186,  192,  192,  192,  285,  284,  193,

      193,  193,  188,  194,  194,  194,  189,  193,  283,  190,
      230,  230,  230,  230,  280,  191,  231,  231,  231,  192,
      189,  232,  232,  232,  193,  279,  278,  191,  194,  193,
      233,  233,  233,  277,  232,  230,  263,  194,  234,  234,
      234,  231,  235,  235,  235,  261,  232,  259,  258,  257,
      231,  236,  236,  236,  256,  233,  233,  255,  232,  254,
      238,  238,  238,  234,  239,  239,  239,  235,  235,  237,
      237,  237,  234,  238,  253,  252,  236,  237,  240,  240,
      240,  236,  241,  241,  241,  238,  266,  266,  266,  239,
      239,  267,  267,  267,  237,  268,  268,  268,  251,  269,

      269,  269,  250,  240,  271,  271,  271,  241,  270,  270,
      270,  266,  274,  274,  274,  267,  267,  273,  273,  273,
      268,  272,  272,  272,  269,  266,  247,  241,  269,  271,
      246,  245,  268,  270,  244,  243,  272,  274,  275,  275,
      275,  267,  273,  242,  225,  270,  272,  295,  295,  295,
      222,  273,  296,  296,  296,  219,  274,  297,  297,  297,
      298,  298,  298,  275,  299,  299,  299,  216,  275,  300,
      300,  300,  295,  301,  301,  301,  213,  296,  302,  302,
      302,  212,  297,  210,  207,  298,  200,  297,  197,  299,
      196,  178,  295,  175,  300,  303,  303,  303,  301,  320,

      320,  320,  174,  302,  171,  320,  298,  321,  321,  321,
      322,  322,  322,  169,  323,  323,  323,  167,  301,  166,
      303,  165,  302,  161,  320,  324,  324,  324,  325,  325,
      325,  159,  321,  153,  152,  322,  322,  151,  303,  323,
      150,  324,  149,  146,  323,  145,  321,  338,  338,  338,
      324,  144,  143,  325,  325,  339,  339,  339,  340,  340,
      340,  341,  341,  341,  142,  342,  342,  342,  343,  343,
      343,  141,  338,  357,  357,  357,  140,  358,  358,  358,
      339,  115,  110,  340,  338,  109,  341,  359,  359,  359,
      342,  106,  104,  343,  102,  340,  342,  358,  357,  357,

      339,  101,  358,  100,  341,  343,   94,  360,  360,  360,
       88,   87,  359,  361,  361,  361,  361,  362,  362,  362,
      375,  375,  375,  376,  376,  376,  377,  377,  377,  377,
       86,  359,  360,  360,  378,  378,  378,   85,  361,   84,
       81,   80,  362,   79,   78,  375,   77,   76,  376,    3,
        0,  377,  391,  391,  391,  392,  392,  392,  392,  378,
      394,  394,  394,  376,  375,  405,  405,  405,  414,  414,
      414,  378,  420,  420,  420,  420,    0,  391,    0,    0,
      392,    0,    0,    0,    0,  394,    0,    0,    0,    0,
      405,    0,    0,  414,    0,  405,  391,  420,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  414,  435,  435,    0,  435,  436,  436,  436,
      436,  438,    0,  438,  439,  439,  439,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[62] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
    0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lexer.l"
#line 2 "lexer.l"
#include <iostream>
#include <string>
#include "symbol_table.h" // Inclua o cabeçalho da tabela de símbolos

using std::cout;
using std::string;

int types = 0, rational = 0, real = 0, langString = 0, plainLiteral = 0, xmlLiteral = 0, literal = 0, anyURI = 0, base64Binary = 0, boolean_ = 0, byte_ = 0, dateTime = 0, dateTimeStamp = 0, decimal = 0, doubleType = 0, floatType = 0, hexBinary = 0, intType = 0, integer = 0, language = 0, longType = 0, nameType = 0, ncName = 0, negativeInteger = 0, nmToken = 0, nonNegativeInteger = 0, nonPositiveInteger = 0, normalizedString = 0, positiveInteger = 0, shortType = 0, stringType = 0, tokenType = 0, unsignedByte = 0, unsignedInt = 0, unsignedLong = 0, unsignedShort = 0;

int quantifiers = 0, relOp = 0, keyWord = 0, operators = 0, classes = 0, literals = 0, properties = 0, symbols = 0, individuals = 0, nameSpace = 0, cardinals = 0, comments = 0;

int andCount = 0, orCount = 0, notCount = 0, someCount = 0, allCount = 0, valueCount = 0, minCount = 0, maxCount = 0, exactlyCount = 0, thatCount = 0, onlyCount = 0, classCount = 0, equivalentToCount = 0, individualsCount = 0, subClassOfCount = 0, disjointClasses = 0;

SymbolTable symbolTable; // Instância da tabela de símbolos
#line 887 "lex.yy.cc"
#line 888 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 21 "lexer.l"


#line 1023 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 435 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1328 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 23 "lexer.l"
{
    relOp++;
    andCount++;
    symbolTable.addSymbol("AND", "Relational Operator", yylineno);
    cout << "AND token\n";
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 30 "lexer.l"
{
    relOp++;
    orCount++;
    symbolTable.addSymbol("OR", "Relational Operator", yylineno);
    cout << "OR token\n";
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 37 "lexer.l"
{
    relOp++;
    notCount++;
    symbolTable.addSymbol("NOT", "Relational Operator", yylineno);
    cout << "NOT token\n";
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 44 "lexer.l"
{
    quantifiers++;
    someCount++;
    symbolTable.addSymbol("SOME", "Quantifier", yylineno);
    cout << "SOME token\n";
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 51 "lexer.l"
{
    quantifiers++;
    allCount++;
    symbolTable.addSymbol("ALL", "Quantifier", yylineno);
    cout << "ALL token\n";
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 58 "lexer.l"
{
    quantifiers++;
    valueCount++;
    symbolTable.addSymbol("VALUE", "Quantifier", yylineno);
    cout << "VALUE token\n";
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 65 "lexer.l"
{
    quantifiers++;
    minCount++;
    symbolTable.addSymbol("MIN", "Quantifier", yylineno);
    cout << "MIN token\n";
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 72 "lexer.l"
{
    quantifiers++;
    maxCount++;
    symbolTable.addSymbol("MAX", "Quantifier", yylineno);
    cout << "MAX token\n";
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 79 "lexer.l"
{
    quantifiers++;
    exactlyCount++;
    symbolTable.addSymbol("EXACTLY", "Quantifier", yylineno);
    cout << "EXACTLY token\n";
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 86 "lexer.l"
{
    quantifiers++;
    thatCount++;
    symbolTable.addSymbol("THAT", "Quantifier", yylineno);
    cout << "THAT token\n";
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 93 "lexer.l"
{
    quantifiers++;
    onlyCount++;
    symbolTable.addSymbol("ONLY", "Quantifier", yylineno);
    cout << "ONLY token\n";
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 100 "lexer.l"
{
    symbolTable.addSymbol("Class", "Keyword", yylineno);
    cout << "Class token\n";
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 105 "lexer.l"
{
    symbolTable.addSymbol("EquivalentTo", "Keyword", yylineno);
    cout << "EquivalentTo token\n";
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 110 "lexer.l"
{
    symbolTable.addSymbol("Individuals", "Keyword", yylineno);
    cout << "Individuals token\n";
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 115 "lexer.l"
{
    symbolTable.addSymbol("SubClassOf", "Keyword", yylineno);
    cout << "SubClassOf token\n";
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 120 "lexer.l"
{
    symbolTable.addSymbol("DisjointClasses", "Keyword", yylineno);
    cout << "DisjointClasses token\n";
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 125 "lexer.l"
{
    symbolTable.addSymbol("rational", "Type", yylineno);
    cout << "RATIONAL token\n";
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 130 "lexer.l"
{
    symbolTable.addSymbol("real", "Type", yylineno);
    cout << "REAL token\n";
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 135 "lexer.l"
{
    symbolTable.addSymbol("langString", "Type", yylineno);
    cout << "LANGSTRING token\n";
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 140 "lexer.l"
{
    symbolTable.addSymbol("PlainLiteral", "Type", yylineno);
    cout << "PLAINLITERAL token\n";
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 145 "lexer.l"
{
    symbolTable.addSymbol("XMLLiteral", "Type", yylineno);
    cout << "XMLLITERAL token\n";
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 150 "lexer.l"
{
    symbolTable.addSymbol("Literal", "Type", yylineno);
    cout << "LITERAL token\n";
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 155 "lexer.l"
{
    symbolTable.addSymbol("anyURI", "Type", yylineno);
    cout << "ANYURI token\n";
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 160 "lexer.l"
{
    symbolTable.addSymbol("base64Binary", "Type", yylineno);
    cout << "BASE64BINARY token\n";
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 165 "lexer.l"
{
    symbolTable.addSymbol("boolean", "Type", yylineno);
    cout << "BOOLEAN token\n";
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 170 "lexer.l"
{
    symbolTable.addSymbol("byte", "Type", yylineno);
    cout << "BYTE token\n";
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 175 "lexer.l"
{
    symbolTable.addSymbol("dateTime", "Type", yylineno);
    cout << "DATETIME token\n";
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 180 "lexer.l"
{
    symbolTable.addSymbol("dateTimeStamp", "Type", yylineno);
    cout << "DATETIMESTAMP token\n";
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 185 "lexer.l"
{
    symbolTable.addSymbol("decimal", "Type", yylineno);
    cout << "DECIMAL token\n";
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 190 "lexer.l"
{
    symbolTable.addSymbol("double", "Type", yylineno);
    cout << "DOUBLE token\n";
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 195 "lexer.l"
{
    symbolTable.addSymbol("float", "Type", yylineno);
    cout << "FLOAT token\n";
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 200 "lexer.l"
{
    symbolTable.addSymbol("hexBinary", "Type", yylineno);
    cout << "HEXBINARY token\n";
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 205 "lexer.l"
{
    symbolTable.addSymbol("int", "Type", yylineno);
    cout << "INT token\n";
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 210 "lexer.l"
{
    symbolTable.addSymbol("integer", "Type", yylineno);
    cout << "INTEGER token\n";
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 215 "lexer.l"
{
    symbolTable.addSymbol("language", "Type", yylineno);
    cout << "LANGUAGE token\n";
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 220 "lexer.l"
{
    symbolTable.addSymbol("long", "Type", yylineno);
    cout << "LONG token\n";
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 225 "lexer.l"
{
    symbolTable.addSymbol("Name", "Type", yylineno);
    cout << "NAME token\n";
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 230 "lexer.l"
{
    symbolTable.addSymbol("NCName", "Type", yylineno);
    cout << "NCNAME token\n";
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 235 "lexer.l"
{
    symbolTable.addSymbol("negativeInteger", "Type", yylineno);
    cout << "NEGATIVEINTEGER token\n";
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 240 "lexer.l"
{
    symbolTable.addSymbol("NMTOKEN", "Type", yylineno);
    cout << "NMTOKEN token\n";
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 245 "lexer.l"
{
    symbolTable.addSymbol("nonNegativeInteger", "Type", yylineno);
    cout << "NONNEGATIVEINTEGER token\n";
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 250 "lexer.l"
{
    symbolTable.addSymbol("nonPositiveInteger", "Type", yylineno);
    cout << "NONPOSITIVEINTEGER token\n";
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 255 "lexer.l"
{
    symbolTable.addSymbol("normalizedString", "Type", yylineno);
    cout << "NORMALIZEDSTRING token\n";
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 260 "lexer.l"
{
    symbolTable.addSymbol("positiveInteger", "Type", yylineno);
    cout << "POSITIVEINTEGER token\n";
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 265 "lexer.l"
{
    symbolTable.addSymbol("short", "Type", yylineno);
    cout << "SHORT token\n";
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 270 "lexer.l"
{
    symbolTable.addSymbol("string", "Type", yylineno);
    cout << "STRING token\n";
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 275 "lexer.l"
{
    symbolTable.addSymbol("token", "Type", yylineno);
    cout << "TOKEN token\n";
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 280 "lexer.l"
{
    symbolTable.addSymbol("unsignedByte", "Type", yylineno);
    cout << "UNSIGNEDBYTE token\n";
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 285 "lexer.l"
{
    symbolTable.addSymbol("unsignedInt", "Type", yylineno);
    cout << "UNSIGNEDINT token\n";
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 290 "lexer.l"
{
    symbolTable.addSymbol("unsignedLong", "Type", yylineno);
    cout << "UNSIGNEDLONG token\n";
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 295 "lexer.l"
{
    symbolTable.addSymbol("unsignedShort", "Type", yylineno);
    cout << "UNSIGNEDSHORT token\n";
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 300 "lexer.l"
{
    individuals++;
    symbolTable.addSymbol(yytext, "Individual", yylineno);
    cout << yytext << " Individual ID\n";
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 306 "lexer.l"
{
    classes++;
    symbolTable.addSymbol(yytext, "Class", yylineno);
    cout << yytext << " Class ID\n";
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 312 "lexer.l"
{
    properties++;
    symbolTable.addSymbol(yytext, "Property", yylineno);
    cout << yytext << " Property ID\n";
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 318 "lexer.l"
{
    cout << yytext << " Special Symbol ID\n";
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 322 "lexer.l"
{
    symbolTable.addSymbol(yytext, "Namespace", yylineno);
    cout << yytext << " Namespace ID\n";
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 327 "lexer.l"
{
    cout << "[ERROR] Invalid Token: " << yytext << ". Cardinal must be not followed by letters\n";
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 331 "lexer.l"
{
    cardinals++;
    symbolTable.addSymbol(yytext, "Cardinal", yylineno);
    cout << yytext << " Cardinal ID\n";
}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 337 "lexer.l"
{ /* Ignorar espaços, tabs e novas linhas */ }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 338 "lexer.l"
{ cout << "Unknown token: " << yytext << "\n"; } 
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 340 "lexer.l"
ECHO;
	YY_BREAK
#line 1594 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 435 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 435 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 434);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 340 "lexer.l"


int main() {
    yyFlexLexer lexer;
    lexer.yylex();

    symbolTable.printTable();

    return 0;
}

